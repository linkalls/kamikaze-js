var w=Object.defineProperty;var i=(s,t)=>w(s,"name",{value:t,configurable:!0});var a=class extends Error{static{i(this,"HTTPError")}constructor(t,e,r,u,o){super(t),this.name="HTTPError",this.url=e,this.method=r,this.status=u,this.body=o}},p=class s{static{i(this,"NovaHTTP")}static awaitEventStatus=!1;static getAwaitEventStatus(){return s.awaitEventStatus}static setAwaitEventStatus(t){s.awaitEventStatus=t;let e=new CustomEvent("awaitEvent",{detail:t});document.dispatchEvent(e)}static async request(t,e,r=null,u={}){s.setAwaitEventStatus(!0);let o=r&&typeof r=="object",l=o?"application/json":"",E={method:e,headers:{...u,...l?{"Content-Type":l}:{}},body:o?JSON.stringify(r):r};try{let n=await fetch(t,E),c=await n.text();if(!n.ok)throw new a(`HTTP error! Status: ${n.status}`,t,e,n.status,c);try{return JSON.parse(c)}catch{throw new a("JSON parse error!",t,e,n.status,c)}}catch(n){throw console.error(`Error during HTTP request: ${n.message}`),console.error(`URL: ${n.url}`),console.error(`Method: ${n.method}`),console.error(`Status: ${n.status}`),console.error(`Response Body: ${n.body}`),n}finally{s.setAwaitEventStatus(!1)}}static get(t,e={}){return s.request(t,"GET",null,e)}static post(t,e,r={}){return s.request(t,"POST",e,r)}static put(t,e,r={}){return s.request(t,"PUT",e,r)}static delete(t,e={}){return s.request(t,"DELETE",null,e)}static patch(t,e,r={}){return s.request(t,"PATCH",e,r)}};export{p as NovaHTTP};
